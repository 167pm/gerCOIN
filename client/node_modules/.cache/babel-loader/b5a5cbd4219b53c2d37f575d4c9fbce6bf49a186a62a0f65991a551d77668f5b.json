{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ge_grekov\\\\Videos\\\\gerCOIN\\\\client\\\\src\\\\DonutChart.js\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DonutChart = ({\n  data,\n  colors,\n  width,\n  height,\n  innerRadius,\n  outerRadius\n}) => {\n  const centerX = width / 2;\n  const centerY = height / 2;\n  const total = data.reduce((sum, item) => sum + item.value, 0);\n  let startAngle = 0;\n  return /*#__PURE__*/_jsxDEV(\"svg\", {\n    width: width,\n    height: height,\n    children: data.map((item, index) => {\n      const value = item.value;\n      const percentage = value / total * 100;\n      const endAngle = startAngle + percentage * 3.6; // 3.6 = 360 / 100\n\n      // Рассчитываем координаты для дуги\n      const startX = centerX + outerRadius * Math.cos(Math.PI / 180 * (startAngle - 90));\n      const startY = centerY + outerRadius * Math.sin(Math.PI / 180 * (startAngle - 90));\n      const endX = centerX + outerRadius * Math.cos(Math.PI / 180 * (endAngle - 90));\n      const endY = centerY + outerRadius * Math.sin(Math.PI / 180 * (endAngle - 90));\n      const largeArcFlag = percentage > 50 ? 1 : 0;\n\n      // Путь для дуги\n      const pathData = `\n          M ${centerX} ${centerY}\n          L ${startX} ${startY}\n          A ${outerRadius} ${outerRadius} 0 ${largeArcFlag} 1 ${endX} ${endY}\n          L ${centerX} ${centerY}\n          Z\n        `;\n\n      // Путь для внутреннего радиуса (дырка в пончике)\n      const innerPathData = `\n          M ${centerX} ${centerY}\n          L ${startX} ${startY}\n          A ${innerRadius} ${innerRadius} 0 ${largeArcFlag} 1 ${endX} ${endY}\n          L ${centerX} ${centerY}\n          Z\n        `;\n      startAngle = endAngle;\n      return /*#__PURE__*/_jsxDEV(\"g\", {\n        children: [/*#__PURE__*/_jsxDEV(\"path\", {\n          d: pathData,\n          fill: colors[index % colors.length],\n          stroke: \"#212429\" // Цвет обводки\n          ,\n          strokeWidth: \"2\" // Толщина обводки\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"path\", {\n          d: innerPathData,\n          fill: \"#212429\" // Цвет дырки\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 13\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 11\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 5\n  }, this);\n};\n_c = DonutChart;\nexport default DonutChart;\nvar _c;\n$RefreshReg$(_c, \"DonutChart\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","DonutChart","data","colors","width","height","innerRadius","outerRadius","centerX","centerY","total","reduce","sum","item","value","startAngle","children","map","index","percentage","endAngle","startX","Math","cos","PI","startY","sin","endX","endY","largeArcFlag","pathData","innerPathData","d","fill","length","stroke","strokeWidth","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/ge_grekov/Videos/gerCOIN/client/src/DonutChart.js"],"sourcesContent":["import React from 'react';\r\n\r\nconst DonutChart = ({ data, colors, width, height, innerRadius, outerRadius }) => {\r\n  const centerX = width / 2;\r\n  const centerY = height / 2;\r\n  const total = data.reduce((sum, item) => sum + item.value, 0);\r\n\r\n  let startAngle = 0;\r\n\r\n  return (\r\n    <svg width={width} height={height}>\r\n      {data.map((item, index) => {\r\n        const value = item.value;\r\n        const percentage = (value / total) * 100;\r\n        const endAngle = startAngle + (percentage * 3.6); // 3.6 = 360 / 100\r\n\r\n        // Рассчитываем координаты для дуги\r\n        const startX = centerX + outerRadius * Math.cos((Math.PI / 180) * (startAngle - 90));\r\n        const startY = centerY + outerRadius * Math.sin((Math.PI / 180) * (startAngle - 90));\r\n        const endX = centerX + outerRadius * Math.cos((Math.PI / 180) * (endAngle - 90));\r\n        const endY = centerY + outerRadius * Math.sin((Math.PI / 180) * (endAngle - 90));\r\n\r\n        const largeArcFlag = percentage > 50 ? 1 : 0;\r\n\r\n        // Путь для дуги\r\n        const pathData = `\r\n          M ${centerX} ${centerY}\r\n          L ${startX} ${startY}\r\n          A ${outerRadius} ${outerRadius} 0 ${largeArcFlag} 1 ${endX} ${endY}\r\n          L ${centerX} ${centerY}\r\n          Z\r\n        `;\r\n\r\n        // Путь для внутреннего радиуса (дырка в пончике)\r\n        const innerPathData = `\r\n          M ${centerX} ${centerY}\r\n          L ${startX} ${startY}\r\n          A ${innerRadius} ${innerRadius} 0 ${largeArcFlag} 1 ${endX} ${endY}\r\n          L ${centerX} ${centerY}\r\n          Z\r\n        `;\r\n\r\n        startAngle = endAngle;\r\n\r\n        return (\r\n          <g key={index}>\r\n            <path\r\n              d={pathData}\r\n              fill={colors[index % colors.length]}\r\n              stroke=\"#212429\" // Цвет обводки\r\n              strokeWidth=\"2\" // Толщина обводки\r\n            />\r\n            <path\r\n              d={innerPathData}\r\n              fill=\"#212429\" // Цвет дырки\r\n            />\r\n          </g>\r\n        );\r\n      })}\r\n    </svg>\r\n  );\r\n};\r\n\r\nexport default DonutChart;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}